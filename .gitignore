target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
# https://maven.apache.org/wrapper/#usage-without-binary-jar
.mvn/wrapper/maven-wrapper.jar

# Eclipse m2e generated files
# Eclipse Core
.project
# JDT-specific (Eclipse Java Development Tools)
.classpath


Clone a GitHub repository

git clone https://github.com/username/sample-repo.git
cd sample-repo


Cloning means making a local copy of the repo from GitHub.

Check status & branches

git status       # shows untracked/modified files
git branch       # shows current branch
git branch -a    # lists all local and remote branches


Create a new branch

git checkout -b feature-branch


Creates and switches to feature-branch.

Make some changes & commit

echo "Hello Git" >> file1.txt
git add file1.txt
git commit -m "Added file1.txt with Hello Git"


git add stages files, git commit saves them in history.

Push branch to GitHub

git push origin feature-branch


Pushes your local branch to GitHub.

Merge branches (without conflicts)

Switch back to main and merge:

git checkout main
git pull origin main    # make sure it's updated
git merge feature-branch


Merges feature-branch into main.

Create & resolve a merge conflict

Switch to feature-branch and edit file1.txt:

echo "Feature change" >> file1.txt
git add file1.txt
git commit -m "Feature branch edit"


Switch to main and edit the same line in file1.txt:

echo "Main branch change" >> file1.txt
git add file1.txt
git commit -m "Main branch edit"


Try merging:

git checkout main
git merge feature-branch


You’ll get a merge conflict in file1.txt.

Resolve conflict: open file1.txt, fix it manually, then:

git add file1.txt
git commit -m "Resolved merge conflict in file1.txt"


Revert a commit

Suppose you want to undo the last commit:

git log --oneline     # find commit hash
git revert <commit-hash>


Creates a new commit that undoes changes from the given commit.

Pull latest changes from GitHub

git pull origin main


Fetch and merge changes from GitHub into local branch.

Push your updates

git push origin main


Setup & Config

git --version → Check Git version

git config --global user.name "Name" → Set username

git config --global user.email "email@example.com" → Set email

git config --list → View config

2. Repository Management

git init → Initialize repo

git clone <url> → Clone remote repo

git remote -v → Show remotes

git remote add origin <url> → Add remote

git remote remove origin → Remove remote

git remote rename origin upstream → Rename remote

git remote set-url origin <new-url> → Change remote URL

git remote show origin → Show remote info

git remote prune origin → Clean deleted remote branches

3. Staging & Committing

git status → Show working/staged changes

git add file.txt / git add . → Stage files

git commit -m "msg" → Commit staged changes

git commit --amend -m "new msg" → Fix last commit message

git restore file.txt → Discard unstaged changes

git reset file.txt → Unstage changes

4. Branching & Switching

git branch → List branches

git branch new-branch → Create branch

git checkout branch-name / git switch branch-name → Switch branch

git checkout -b new-branch / git switch -c new-branch → Create & switch

git branch -d branch-name → Delete branch (safe)

git branch -D branch-name → Force delete branch

git branch -a → List all branches (local + remote)

git fetch origin branch-name → Fetch a branch

git push --set-upstream origin branch-name → Link local branch with remote

5. Merging & Rebasing

git merge branch-name → Merge branch into current

git rebase origin/main → Rebase onto remote branch

Conflict fix: edit file → git add file → git commit

6. Pushing & Pulling

git push origin main → Push changes

git push -u origin main → First push + set upstream

git pull origin main → Pull & merge remote changes

git fetch origin → Fetch (without merge)

7. Undoing & Recovering

git reset <file> → Unstage file

git reset --hard → Reset to last commit (DANGEROUS)

git revert <commit> → Undo commit safely

git reflog → Show all refs (recover deleted branch)

git checkout -b branch <commit-hash> → Recover branch

8. Viewing History

git log → Commit history

git log --oneline --graph --decorate --all → Pretty history

git diff → See unstaged changes

git show <commit> → Show commit details

git blame file.txt → See who edited each line

9. Temporary Work

git stash → Save uncommitted changes

git stash apply → Restore stash

git stash pop → Restore + delete stash

10. Miscellaneous

.gitignore → Ignore files (e.g., *.log, node_modules/)

git branch --merged → Show merged branches

git branch -d branch1 branch2 branch3 → Delete multiple branches

git filter-repo --path sensitive.txt --invert-paths
